<?php

/**
 * @file
 * Contains main module logic.
 */

use Drupal\give\DonationForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\give\GiveFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\give\Entity\GiveForm;

/**
 * Implements hook_form_FORM_ID_alter() for give_donation_form().
 */
function give_record_form_give_donation_form_alter(&$form, &$form_state, $form_id) {
  $form['actions']['submit']['#submit'][] = 'give_record_give_donation_redirect_submit';
  /** @var \Drupal\Core\Entity\ContentEntityForm $form_object */
  $form_object = $form_state->getFormObject();
  /* @var \Drupal\give\DonationInterface $give_donation */
  $give_donation = $form_object->getEntity();

  $give_form = GiveForm::load($give_donation->bundle());
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_mode */
  if ($form_object instanceof DonationForm) {
    if ($submit_text = $give_form->getThirdPartySetting('give_record', 'submit_text', FALSE)) {
      $form['actions']['submit']['#value'] = $submit_text;
    }
    if (!$give_form->getThirdPartySetting('give_record', 'show_preview', TRUE)) {
      $form['actions']['preview']['#access'] = FALSE;
    }
  }
}

/**
 * Implements a Submit Callback for give_donation_form.
 */
function give_record_give_donation_redirect_submit(&$form, &$form_state) {
  /* @var \Drupal\give\DonationInterface $give_donation */
  $give_donation = $form_state->getFormObject()->getEntity();
  if ($form['#form_id'] === "give_donation_donate_payment_form") {
    $give_form = GiveForm::load($give_donation->bundle());
    if ($redirect_uri = $give_form->getThirdPartySetting('give_record', 'redirect_uri', FALSE)) {
      $form_state->setRedirectUrl(Url::fromUri($redirect_uri));
    }
  }
  else {
    // Url::fromUri('entity:give_donation/' . $give_donation->id()) goes to /admin/structure/give/donations/[id]
    $form_state->setRedirectUrl(Url::fromRoute('entity.give_form.donate', ['give_form' => $give_donation->get('give_form')->target_id, 'give_donation' => $give_donation->id()]));
  }
}

/**
 * Implements hook_entity_base_field_info().
 */
function give_record_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'give_donation') {
    $fields = array();
    $fields['id'] = BaseFieldDefinition::create('integer')
      ->setLabel(t('Donation ID'))
      ->setDescription(t('The donation ID.'))
      ->setReadOnly(TRUE)
      // Explicitly set this to 'give' so that
      // ContentEntityDatabaseStorage::usesDedicatedTable() doesn't attempt to
      // put the ID in a dedicated table.
      // @todo Remove when https://www.drupal.org/node/1498720 is in.
      ->setProvider('give')
      ->setSetting('unsigned', TRUE);

    $fields['created'] = BaseFieldDefinition::create('created')
      ->setLabel(t('Created'))
      ->setDescription(t('The time that the donation was created.'))
      ->setTranslatable(TRUE)
      ->setReadOnly(TRUE);

    return $fields;
  }
}


/**
 * Implements hook_entity_base_field_info_alter().
 */
function give_record_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'give_donation') {
    // Start at min 3 because donation default weight is 0.
    $i = -3;
    foreach (array('name', 'mail', 'amount') as $field_name) {
      $fields[$field_name]->setDisplayConfigurable('view', TRUE);
      $fields[$field_name]->setDisplayOptions('view', array('weight' => $i));
      $i++;
    }
  }
}

/**
 * Implements hook_entity_operation_alter().
 */
function give_record_entity_operation_alter(array &$operations, EntityInterface $entity) {
  if ($entity->getEntityTypeId() == 'give_donation' && $entity->access('view')) {
    $operations['view'] = array(
      'title' => t('View'),
      'weight' => 0,
      'url' => $entity->urlInfo('canonical'),
    );
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function give_record_entity_type_alter(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Set the controller class for nodes to an alternate implementation of the
  // Drupal\Core\Entity\EntityStorageInterface interface.
  $entity_types['give_donation']->setStorageClass('\Drupal\Core\Entity\Sql\SqlContentEntityStorage');
  $keys = $entity_types['give_donation']->getKeys();
  $keys['id'] = 'id';
  $keys['label'] = 'label';
  $entity_types['give_donation']->set('entity_keys', $keys);
  $entity_types['give_donation']->set('base_table', 'give_donation');
  // Add edit and delete forms.
  $entity_types['give_donation']->setFormClass('edit', '\Drupal\give_record\DonationEditForm');
  $entity_types['give_donation']->setFormClass('delete', '\Drupal\Core\Entity\ContentEntityDeleteForm');
  // Allow edit/delete links in list builder.
  $entity_types['give_donation']->setLinkTemplate('collection', '/admin/structure/give/donations');
  $entity_types['give_donation']->setLinkTemplate('canonical', '/admin/structure/give/donations/{give_donation}');
  $entity_types['give_donation']->setLinkTemplate('edit-form', '/admin/structure/give/donations/{give_donation}/edit');
  $entity_types['give_donation']->setLinkTemplate('delete-form', '/admin/structure/give/donations/{give_donation}/delete');
  // @todo Replace with access control handler when not enough.
  $entity_types['give_donation']->set('admin_permission', 'administer give');
  // Integrate with Views.
  $entity_types['give_donation']->setHandlerClass('views_data', '\Drupal\give_record\DonationViewsData');
  $entity_types['give_donation']->setListBuilderClass('\Drupal\Core\Entity\EntityListBuilder');

  $entity_types['give_form']->setViewBuilderClass('\Drupal\give_record\GiveFormViewBuilder');
}
