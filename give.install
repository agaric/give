<?php

/**
 * @file
 * Install, update and uninstall functions for the give module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\give\Entity\GiveForm;

/**
 * Implements hook_install().
 */
function give_install() {
  // Adjustments to the pre-created donation form.
  $default_donate_form_id = 'donate';

  // Set the recipient to use the site mail by default.
  $mail = \Drupal::config('system.site')->get('mail');
  $donate_form = GiveForm::load($default_donate_form_id);

  // Check that form module exists before to try set it as default.
  if (!$donate_form) {
    return;
  }

  $donate_form->setRecipients([$mail]);
  $donate_form->save();

  // Set this form as the default donation form.
  $give_settings = \Drupal::configFactory()->getEditable('give.settings');
  $give_settings->set('default_form', $default_donate_form_id)->save();
}

/**
 * Add 'stripe_token' field to 'donation' entities.
 */
function give_update_8001() {
  // Install the definition that this field had in
  // \Drupal\give\Entity\Donation::baseFieldDefinitions()
  // at the time that this update function was written. If/when code is
  // deployed that changes that definition, the corresponding module must
  // implement an update function that invokes
  // \Drupal::entityDefinitionUpdateManager()->updateFieldStorageDefinition()
  // with the new definition.
  $storage_definition = BaseFieldDefinition::create('string')
    ->setLabel(t('Stripe token'))
    ->setDescription(t('The token returned by Stripe used to tell Stripe to process the donation.'));

  \Drupal::entityDefinitionUpdateManager()
    ->installFieldStorageDefinition('stripe_token', 'give_donation', 'give', $storage_definition);
}

/**
 * Add the default frequencies to the already created entities.
 */
function give_update_8002() {
  $entities = \Drupal::entityQuery('give_form');
  $ids = $entities->execute();
  foreach ($ids as $id) {
    $give_form = GiveForm::load($id);
    if (empty($give_form->getFrequencies())) {
      $default = give_get_default_frequencies();
      $give_form->setFrequencies($default);
      $give_form->save();
    }
  }
}

/**
 * Add address fields to 'donation' entities.
 */
function give_update_8003() {
  $fields = [];

  $fields['address_address1'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Address line 1'))
    ->setDescription(t('The street address or PO Box of the donor; used in billing address.'));

  $fields['address_address2'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Address line 2'))
    ->setDescription(t('Optional apartment/suite/unit of the donor; used in billing address.'));

  $fields['address_city'] = BaseFieldDefinition::create('string')
    ->setLabel(t('City or district'))
    ->setDescription(t('The town of the donor; used in billing address.'));

  $fields['address_zip'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Postal code'))
    ->setDescription(t('ZIP or postal code of the donor; used in billing address.'));

  $fields['address_state'] = BaseFieldDefinition::create('string')
    ->setLabel(t('State or province'))
    ->setDescription(t('The state/province/region of the donor; used in billing address.'));

  $fields['address_country'] = BaseFieldDefinition::create('string')
    ->setLabel(t('Country'))
    ->setDescription(t('The country the donor; used in billing address.'));

  foreach ($fields as $field => $storage_definition) {
    \Drupal::entityDefinitionUpdateManager()
      ->installFieldStorageDefinition($field, 'give_donation', 'give', $storage_definition);
  }
}
