<?php

/**
 * @file
 * Enables the use of donation forms to give money on your site.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Component\Utility\Xss;

/**
 * Denotes that the donation is not completed.
 */
const DONATION_NOT_COMPLETED = 0;

/**
 * Denotes that the donation is completed.
 */
const DONATION_COMPLETED = 1;

/**
 * Process donation with Stripe.
 */
const GIVE_WITH_STRIPE = 1;

/**
 * Process donation with Dwolla.
 */
const GIVE_WITH_DWOLLA = 2;

/**
 * Accept a pledge to pay by check or other.
 */
const GIVE_WITH_CHECK = 3;

/**
 * Implements hook_help().
 */
function give_help($route_name, RouteMatchInterface $route_match) {

  switch ($route_name) {
    case 'help.page.give':
      $menu_page = \Drupal::moduleHandler()->moduleExists('menu_ui') ? \Drupal::url('entity.menu.collection') : '#';
      $block_page = \Drupal::moduleHandler()->moduleExists('block') ? \Drupal::url('block.admin_display') : '#';
      $give_page = \Drupal::url('entity.give_form.collection');
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Give module allows visitors to donate to you with credit/debit card or bank transfer using donation forms you can configure. For more information, see the <a href=":give">online documentation for the Give module</a>.', [':give' => 'https://www.drupal.org/project/give']) . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring give (donation) forms') . '</dt>';
      $output .= '<dd>' . t('On the <a href=":give_admin">Give forms page</a>, you can configure the fields and display of the donation forms. Each give form has a machine name, a label, and zero or more defined recipients to receive notification when someone donates (or tries to donate).', [':give_admin' => $give_page]) . '</dd>';
      $output .= '<dt>' . t('Linking to give (donation) forms') . '</dt>';
      $output .= '<dd>' . t('One give form can be designated as the default donation form. If you choose to designate a default form, the <em>Give</em> menu link in the <em>Main</em> menu will link to it. You can modify this link from the <a href=":menu-settings">Menus page</a> if you have the Menu UI module installed. You can also create links to other give forms; the URL for each form you have set up has format <em>give/machine_name_of_form</em>.', [':menu-settings' => $menu_page]) . '</p>';
      $output .= '<dt>' . t('Adding fields to give forms') . '</dt>';
      $output .= '<dd>' . t('From the <a href=":give_admin">Give forms page</a>, you can configure the fields to be shown on different give forms, including their labels and help text. If you would like other content (such as text or images) to appear on a donation form, use a block. You can create and edit blocks on the <a href=":blocks">Block layout page</a>, if the Block module is installed. Another possibility is to embed donation forms in content with an entity reference field, or in paragraphs with the contributed <a href=":paragraphs">Paragraphs module</a>.', [':blocks' => $block_page, ':give_admin' => $give_page, ':paragraphs' => 'https://www.drupal.org/project/paragraphs']) . '</dd>';
      $output .= '</dl>';
      return $output;

  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function give_entity_extra_field_info() {
  $fields = [];
  foreach (array_keys(\Drupal::service('entity_type.bundle.info')->getBundleInfo('give_donation')) as $bundle) {
    $fields['give_donation'][$bundle]['form']['name'] = [
      'label' => t('Donor name'),
      'description' => t('Text'),
      'weight' => -50,
    ];
    $fields['give_donation'][$bundle]['form']['mail'] = [
      'label' => t('Donor e-mail'),
      'description' => t('Email'),
      'weight' => -40,
    ];
    $fields['give_donation'][$bundle]['form']['recurring'] = [
      'label' => t('Recurring donation'),
      'description' => t('Option'),
      'weight' => 50,
    ];
  }
  return $fields;
}

/**
 * Implements hook_entity_base_field_info_alter().
 *
 * @TODO do this in the first place rather than as an alter hook.
 */
function give_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'give_donation') {
    $i = -10;
    foreach ([
      'name',
      'mail',
      'give_form',
      'label',
      'amount',
      'recurring',
      'created',
      'complete',
      'address_line1',
      'address_line2',
      'address_city',
      'address_state',
      'address_zip',
      'address_country',
      'stripe_token',
      'card_funding',
      'card_brand',
      'card_last4',
    ] as $field_name) {
      $fields[$field_name]->setDisplayConfigurable('view', TRUE);
      $fields[$field_name]->setDisplayOptions('view', ['weight' => $i]);
      $i++;
    }
  }
}

/**
 * Implements hook_mail().
 */
function give_mail($key, &$message, $params) {
  $give_donation = $params['give_donation'];
  /** @var $donor \Drupal\user\UserInterface */
  $donor = $params['donor'];
  $language = \Drupal::languageManager()->getLanguage($message['langcode']);

  $variables = [
    '@site-name' => \Drupal::config('system.site')->get('name'),
    '@label' => $give_donation->getLabel(),
    '@form' => !empty($params['give_form']) ? $params['give_form']->label() : NULL,
    '@form-url' => \Drupal::url('<current>', [], ['absolute' => TRUE, 'language' => $language]),
    '@donor-name' => $donor->getDisplayName(),
  ];
  if ($donor->isAuthenticated()) {
    $variables['@donor-url'] = $donor->url('canonical', ['absolute' => TRUE, 'language' => $language]);
  }
  else {
    $variables['@donor-url'] = $params['donor']->getEmail();
  }

  switch ($key) {
    case 'donation_notice':
      $options = ['langcode' => $language->getId()];
      $message['subject'] .= t('[@form] @label', $variables, $options);
      $message['body'][] = t("@donor-name (@donor-url) gave a donation through form @form-url.", $variables, $options);
      $markup = entity_view($give_donation, 'email');
      $message['body'][] = render($markup);
      $markup = ['#markup' => '<strong>oooh</strong>'];
      $message['body'][] = render($markup);
      $markup = ['#markup' => "<strong>We do HTML</strong>"];
      $message['body'][] = render($markup);
      break;

    case 'donation_receipt':
      $message['subject'] .= give_replace_donation_tokens($params['give_form']->getSubject(), $give_donation);

      $markup = give_auto_paragraph_text(give_replace_donation_tokens($params['give_form']->getReply(), $give_donation));
      $message['body'][] = render($markup);

      $markup = entity_view($give_donation, 'email');
      $message['body'][] = render($markup);
      $markup = ['#markup' => '<strong>oooh</strong>'];
      $message['body'][] = render($markup);
      break;

  }
}

/**
 * Simple no-dependency token replacement.  More robust would be better.
 */
function give_replace_donation_tokens($message, \Drupal\give\DonationInterface $donation) {
  $search_replace = [
    '[donor_name]' => $donation->getDonorName(),
    '[donor_email]' => $donation->getDonorMail(),
    '[give_label]' => $donation->getGiveForm()->label(),
    '[dollar_amount]' => $donation->getDollarAmount(),
    '[recurring]' => $donation->recurring() ? 'recurring ' : '',
    '[today_date]' => strftime('%B %e, %Y'),
    '[date]' => strftime('%B %e, %Y', $donation->getUpdatedTime()),
  ];
  return str_replace(give_donation_tokens(), array_values($search_replace), $message);
}

/**
 * Tokens used in simple search-replace for donation messages.
 */
function give_donation_tokens() {
  return [
    '[donor_name]',
    '[donor_email]',
    '[give_label]',
    '[dollar_amount]',
    '[recurring]',
    '[today_date]',
    '[date]',
  ];
}

/**
 * Default pre-created frequencies.
 */
function give_get_default_frequencies() {
  return [
    0 => ['interval' => 'month', 'interval_count' => '1', 'description' => 'Every month'],
    1 => ['interval' => 'month', 'interval_count' => '3', 'description' => 'Every 3 months (quarterly)'],
    2 => ['interval' => 'month', 'interval_count' => '6', 'description' => 'Every 6 months (semi-annually)'],
    3 => ['interval' => 'month', 'interval_count' => '12', 'description' => 'Every year (annually)'],
  ];
}

/**
 * Return administrator text filtered to have line breaks and paragraphs.
 */
function give_auto_paragraph_text($text) {
  $manager = \Drupal::service('plugin.manager.filter');
  $bag = new \Drupal\filter\FilterPluginCollection($manager, []);
  $filters = $bag->getAll();
  $filter = $filters['filter_autop'];
  $filtered = $filter->process($source, $filter)->getProcessedText();
  return ['#markup' => $filtered, '#allowed_tags' => Xss::getHtmlTagList()];
}
